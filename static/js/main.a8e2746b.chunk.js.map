{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["papa","require","App","props","onFileUploadHandler","e","file","target","files","validateFile","state","apiResponse","fileValidity","contactCount","type","that","this","parse","worker","step","row","parser","_","isEqual","data","parseCSV","setState","renderFileTypeError","abort","mainContainer","document","getElementById","errorContainer","createElement","setAttribute","errorMessage","innerHTML","appendChild","counterContainer","counterMessage","removeChild","requestBody","formattedRequestBody","JSON","stringify","createRosterContact","bodyParams","fetch","method","headers","body","then","res","clearMessages","status","renderContactCounter","catch","err","console","log","id","name","accept","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a8e2746b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nconst papa = require(\"papaparse\");\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            apiResponse: \"\",\n            fileValidity: true,\n            contactCount: 0\n        }\n    }\n\n    onFileUploadHandler = (e) => {\n        let file = e.target.files[0];\n        this.validateFile(file);\n    }\n\n    validateFile(file) {\n\n        if (file.type === \"text/csv\") {\n            let that = this;\n            papa.parse(file, {\n                worker: true,\n                step: function(row, parser) {\n                    let expectedFirstRow = [\"First Name\", \"Last Name\", \"Email\", \"Sex\"];\n                    if (_.isEqual(expectedFirstRow, row.data)) {\n                        that.parseCSV(file);\n                    } else {\n                        that.setState({ fileValidity: false }, () => {\n                            that.renderFileTypeError();\n                        });\n                    }\n                    parser.abort();\n                }\n            });\n        } else {\n            this.setState({ fileValidity: false }, () => {\n                this.renderFileTypeError();\n            });\n        }\n\n    }\n\n    renderFileTypeError() {\n        let mainContainer = document.getElementById(\"main\");\n        let errorContainer = document.createElement(\"div\");\n        errorContainer.setAttribute(\"id\", \"error-container\");\n        let errorMessage = document.createElement(\"p\");\n        errorMessage.innerHTML = \"Error: File must be in the CSV format and follow the correct template with these header rows: 'First Name', 'Last Name', 'Email', 'Sex'.\";\n        mainContainer.appendChild(errorContainer);\n        errorContainer.appendChild(errorMessage);\n    }\n\n    renderContactCounter() {\n        let mainContainer = document.getElementById(\"main\");\n        let counterContainer = document.createElement(\"div\");\n        counterContainer.setAttribute(\"id\", \"counter-container\");\n        let counterMessage = document.createElement(\"p\");\n        counterMessage.innerHTML = `Success: ${this.state.contactCount} contacts created in OnCall`;\n        mainContainer.appendChild(counterContainer);\n        counterContainer.appendChild(counterMessage);\n    }\n\n    clearMessages() {\n        let mainContainer = document.getElementById(\"main\");\n        let errorContainer = document.getElementById(\"error-container\");\n        let counterContainer = document.getElementById(\"counter-container\");\n        if (errorContainer !== null) { mainContainer.removeChild(errorContainer) }\n        if (counterContainer !== null) { mainContainer.removeChild(counterContainer) }\n    }\n\n    parseCSV(file) {\n        let that = this;\n        papa.parse(file, {\n            worker: true,\n            step: function(row) {\n                if (row.data[0] !== \"First Name\") {\n                    let requestBody = {};\n                    requestBody[\"first_name\"] = row.data[0];\n                    requestBody[\"last_name\"] = row.data[1];\n                    requestBody[\"email\"] = row.data[2];\n                    requestBody[\"sex\"] = row.data[3];\n                    requestBody[\"division\"] = \"https://api.oncallhealth.ca/divisions/2404/\";\n                    requestBody[\"provider\"] = \"https://api.oncallhealth.ca/providers/196157/\";\n                    let formattedRequestBody = JSON.stringify(requestBody);\n                    that.createRosterContact(formattedRequestBody);\n                }\n            }\n        });\n    }\n\n    createRosterContact(bodyParams) {\n        fetch(\"http://localhost:3000/post-new-contact/\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: bodyParams\n        })\n        .then(res => {\n            this.clearMessages();\n            if (res.status === 201) {\n                this.setState({\n                    contactCount: this.state.contactCount + 1\n                }, () => {\n                    this.renderContactCounter();\n                });\n            }\n        })\n        .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <div>\n                <div id=\"main\">\n                    <h1>Bulk Roster Contact Uploader</h1>\n                    <input id=\"file-upload-input\" type=\"file\" name=\"file\" accept=\".csv\" onChange={this.onFileUploadHandler}/>\n                </div>\n                <p>{this.state.apiResponse}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}